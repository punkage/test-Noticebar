package com.kit.SDK;

import java.util.Map;

import org.json.JSONException;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;
import android.webkit.CookieSyncManager;

public class KitManager extends Activity{

	protected static final String PREFS_FILE = "kit_prefs.xml";
	protected static final String PREFS_CONNECTED = "Kit-Connected";
	private static KitManager   _instance;
	private static Context kitContext;
	private static String kitURL;
	private static String userExtID;
	private static KitInfoFactory kitInfoFactory;
	
 	
	//TODO: ???????????? ?????? ??? ???????????? ??????. 	
	
	private KitManager() {

	}
   
	public static KitManager getInstance() {
	   if (_instance == null) {
		   _instance = new KitManager();
	   }
	   return _instance;
	}

	public static void init(Context _context, Activity _activity, String _userExtId) {
		kitContext = _context;
		kitInfoFactory = new KitInfoFactory(kitContext);//getBaseContext
		userExtID = _userExtId;//The User's Identifier of this app (ex: ID,nickname,email,phone, etc. or empty string)

		//Check Kit app's first execution.
		SharedPreferences prefs = kitContext.getSharedPreferences( PREFS_FILE, 0);
				
		if(!prefs.contains(PREFS_CONNECTED)){
			if(kitContext==null) throw new Error("Kit was NOT started.");
			prefs.edit().putString(PREFS_CONNECTED, "Kit-Connected" ).commit();
		}
	}
   
	public static void initIntro(Context _context, Activity _activity, String appKey, String secretKey, String _userExtId) {
		kitContext = _context;
		kitInfoFactory = new KitInfoFactory(kitContext);//getBaseContext
		userExtID = _userExtId;//The User's Identifier of this app (ex: ID,nickname,email,phone, etc. or empty string)
		
		//????????? ???????????? ??????. ????????? ????????? ????????? ?????? ????????? ????????????.
		CookieSyncManager.createInstance(_context);
		CookieSyncManager.getInstance().startSync();
		
		//Check Kit app's first execution.
		SharedPreferences prefs = kitContext.getSharedPreferences( PREFS_FILE, 0);
		if(!prefs.contains(PREFS_CONNECTED)){
			prefs.edit().putString(PREFS_CONNECTED, "Kit-Connected" ).commit();
			KitManager.showIntroScreen(_activity);
		} else {
			KitManager.showAppNoticeIfExist();
		}
	}
   
	public static void showIntroScreen(Activity _activity) {
		if(kitContext==null) throw new Error("Kit was NOT started.");
		
		kitURL = kitInfoFactory.getKitURL("showIntro",userExtID);
   		KitWebview kitWebview = new KitWebview(kitContext, _activity);
		kitWebview.showKitWebview(kitURL);
	}
	
	public static void showKit(Activity _activity) {
		if(kitContext==null) throw new Error("Kit was NOT started.");
		
		kitURL = kitInfoFactory.getKitURL("showMain",userExtID);
   		KitWebview kitWebview = new KitWebview(kitContext, _activity);
   		kitWebview.showKitWebview(kitURL);
	}
   
	public static void showCompleteScreen(Activity _activity) {
		showKit(_activity);
	}
	public static boolean showCompleteScreen(Activity _activity, String _missionKey) {
		if(kitContext==null) throw new Error("Kit was NOT started.");
		
		kitURL = kitInfoFactory.getKitURL("showComplete", userExtID, _missionKey);
   		KitWebview kitWebview = new KitWebview(kitContext, _activity);
		kitWebview.showKitWebview(kitURL);
		
		//TODO: ?????? response??? ?????? ?????? ?????????.
		return true;
	}
	
	
	//completeMission ??? ?????? ?????? ?????? ?????? ???????????????. ??????????????? ????????? ?????????.
	public static boolean missionDone(Activity _activity, String _missionKey, Map<String, Object> _data) {
		if(kitContext==null) throw new Error("Kit was NOT started.");
		
		_data.put("completed", "false");
		
		String jsonStr;
		try {
			jsonStr = KitNetwork.toJSONstr(_data);
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			jsonStr = null;
		}
		return missionDone(_activity, _missionKey, jsonStr);
	}	
	public static boolean missionDone(Activity _activity, String _missionKey, String _jsonedData) {
		if(kitContext==null) throw new Error("Kit was NOT started.");

		kitURL = kitInfoFactory.getKitURL("missionDone", userExtID, _missionKey, _jsonedData);
		String resJSONstr = KitNetwork.requestGET(kitURL);
		//TODO:???????????? ??????.
		
		Map<String,Object> resultMap = KitNetwork.parseJSONtoMap(resJSONstr);
		//TODO:???????????? ??????.
		
		String err_code = (String) resultMap.get("err_code");
		if(err_code.equals("200")) {
			//type: continue/complete ?????????,
			String type = (String) resultMap.get("type");
			
			if(type.equals("complete")) {
				//complete???, ?????? ????????? ????????? ????????? ????????? ??????????????????,(???????????? ?????????????????????.)
				KitMissionContents.setMissionContents(resultMap);
			
				//Kit noticebar ?????????.
	        	KitNoticebar kitNb = new KitNoticebar();
	        	kitNb.showNoticebar(kitContext, _activity, _missionKey);
				
				return true;
			} else if(type.equals("continue")) {
				Log.w("Kit","Not completed. Continued...");
				return true;
			} else {
				Log.w("Kit","Unknown ERROR:"+resultMap.toString());
				return false;
			}
		} else{
			//??????????????? ??????????????? ????????????.
			Log.w("Kit","ERR CODE:"+err_code+" / MESSAGE:"+(String)resultMap.get("message"));			
			return false;
		}

	}
	
	
	//????????????, Kit Noticebar ??????
	public static boolean missionCompleted(Activity _activity, String _missionKey, Map<String, Object> _data) {
		if(kitContext==null) throw new Error("Kit was NOT started.");

		_data.put("completed", "true");
		
		String jsonStr;
		try {
			jsonStr = KitNetwork.toJSONstr(_data);
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			jsonStr = null;
		}
		Log.w("Kit","JSON String : "+jsonStr);
		
		return missionCompleted(_activity, _missionKey, jsonStr);
	}
	public static boolean missionCompleted(Activity _activity, String _missionKey, String _jsonedData) {
		if(kitContext==null) throw new Error("Kit was NOT started.");

		kitURL = kitInfoFactory.getKitURL("missionDone", userExtID, _missionKey, _jsonedData);
		String resJSONstr = KitNetwork.requestGET(kitURL);
		//TODO:???????????? ??????.
		
		Map<String,Object> resultMap = KitNetwork.parseJSONtoMap(resJSONstr);
		//TODO:???????????? ??????.
		
		String err_code = (String) resultMap.get("err_code");
		if(err_code.equals("200")) {
			//type: continue/complete ?????????,
			String type = (String) resultMap.get("type");
			
			if(type.equals("complete")) {
				//complete???, ?????? ????????? ????????? ????????? ??????????????????,
				KitMissionContents.setMissionContents(resultMap);
				
				//Kit noticebar??? ?????? ???????????? ?????????.
	        	KitNoticebar kitNb = new KitNoticebar();
	        	kitNb.showNoticebar(kitContext, _activity, _missionKey);
				
				return true;
			} else if(type.equals("continue")) {
				Log.w("Kit","Not completed. Continued...");
				return false;
			} else {
				Log.w("Kit","Unknown ERROR:"+resultMap.toString());
				return false;
			}
		} else{
			//??????????????? ??????????????? ????????????.
			Log.w("Kit","ERR CODE:"+err_code+" / MESSAGE:"+(String)resultMap.get("message"));
			
			/*?????? ****************************************/
			//type: continue/complete ?????????,
			String type = (String) resultMap.get("type");
			
			if(type.equals("complete")) {
				//complete???, ?????? ????????? ????????? ????????? ??????????????????,
				resultMap.put("mName", "???????????? ??????");
				resultMap.put("mPopupTitle", "??????????????? ???????????????. '???????????? ??????'??? ?????? ????????????.");
				KitMissionContents.setMissionContents(resultMap);
				
				//Kit noticebar??? ?????? ???????????? ?????????.
	        	KitNoticebar kitNb = new KitNoticebar();
	        	kitNb.showNoticebar(kitContext, _activity, _missionKey);
	        	
				return true;
			} else if(type.equals("continue")) {
				Log.w("Kit","Not completed. Continued...");
				return false;
			} else {
				Log.w("Kit","Unknown ERROR:"+resultMap.toString());
				return false;
			}
			/*****************************************/
			
			
			//return false;
		}
	}
	//TODO
	@SuppressWarnings("unused")
	private static void showKitNoticebar() {
		
	}
	
	//TODO
	private static boolean showAppNoticeIfExist() {
		//?????? ????????? ?????? ???????????? ??????.
		return false;
	}
	//TODO
	public static void appOnResume() {
		//??? ???????????? ????????? ??????, ????????? ??????
	}
	//TODO
	public static void appOnPause() {
		//??? ???????????? ????????? ??????, ????????? ??????
	}
}